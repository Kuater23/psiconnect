// firestore.rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Updated role checking functions to check collection membership
    function isAdmin() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isProfessional() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/doctors/$(request.auth.uid));
    }
    
    function isPatient() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/patients/$(request.auth.uid));
    }
    
    // Función para verificar relación médico-paciente - CORREGIDA
    function hasRelation(doctorId, patientId) {
      let relationId = doctorId + '_' + patientId;
      return exists(/databases/$(database)/documents/doctor_patients/$(relationId));
    }
    
    // Users collection - replace with the actual collections
    match /doctors/{userId} {
      // Anyone can create their account (controlled by application logic)
      allow create: if isSignedIn() && request.auth.uid == userId;
      
      // All authenticated users can read doctor data
      allow read: if isSignedIn();
      
      // Only the user or admin can update user data
      allow update: if isOwner(userId) || isAdmin();
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // Patients collection
    match /patients/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow read: if isOwner(userId) || isAdmin() || isProfessional();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Admin collection
    match /admins/{userId} {
      allow create: if isAdmin();  // Only admins can create other admins
      allow read: if isOwner(userId) || isAdmin();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Appointments collection
    match /appointments/{appointmentId} {
      // Patients can create appointments and read their own appointments
      allow create: if isSignedIn() && (
        (isPatient() && request.resource.data.patientId == request.auth.uid) ||
        isProfessional() || 
        isAdmin()
      );
      
      // Users can read appointments they're involved in
      allow read: if isSignedIn() && (
        (isPatient() && resource.data.patientId == request.auth.uid) ||
        (isProfessional() && resource.data.doctorId == request.auth.uid) ||
        isAdmin()
      );
      
      // Professionals can update appointments assigned to them
      // Patients can update certain fields of their own appointments
      allow update: if isSignedIn() && (
        (isProfessional() && resource.data.doctorId == request.auth.uid) ||
        (isPatient() && resource.data.patientId == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'patientNotes'])) ||
        isAdmin()
      );
      
      // Only professionals and admins can delete appointments
      allow delete: if isSignedIn() && (
        (isProfessional() && resource.data.doctorId == request.auth.uid) || 
        isAdmin()
      );
    }
    
    // Doctor-patients relationship collection
    match /doctor_patients/{relationId} {
      // Validate that the document ID follows the expected pattern doctorId_patientId
      function isValidRelationId() {
        return relationId.matches('^[^_]+_[^_]+$');
      }
      
      // Extract doctor and patient IDs from the relation ID
      function getDoctorId() {
        return isValidRelationId() ? relationId.split('_')[0] : null;
      }
      
      function getPatientId() {
        return isValidRelationId() ? relationId.split('_')[1] : null;
      }
      
      // Reglas para la colección doctor_patients
      allow create: if isProfessional() && 
                     isValidRelationId() && 
                     getDoctorId() == request.auth.uid;
                     
      allow read: if isSignedIn() && (
                   isAdmin() || 
                   (isProfessional() && getDoctorId() == request.auth.uid) ||
                   (isPatient() && getPatientId() == request.auth.uid)
                 );
                 
      allow update: if (isProfessional() && 
                     getDoctorId() == request.auth.uid) || 
                     isAdmin();
                     
      allow delete: if (isProfessional() && 
                     getDoctorId() == request.auth.uid) || 
                     isAdmin();
    }
    
    // Colecciones de Documentos de Pacientes - MEJORADA
    
    // Patient documents collection
    match /patient_documents/{documentId} {
      // Professionals can create documents for any patient with whom they have a relationship
      allow create: if isSignedIn() && (
        (isProfessional() && hasRelation(request.auth.uid, request.resource.data.patientId)) ||
        isAdmin()
      );
      
      // Patients can read their own documents
      // Professionals can read documents of their patients
      allow read: if isSignedIn() && (
        (isPatient() && resource.data.patientId == request.auth.uid) ||
        (isProfessional() && hasRelation(request.auth.uid, resource.data.patientId)) ||
        isAdmin()
      );
      
      // Professionals can update documents of their patients
      allow update: if isSignedIn() && (
        (isProfessional() && hasRelation(request.auth.uid, resource.data.patientId)) ||
        isAdmin()
      );
      
      // Professionals can delete documents of their patients
      allow delete: if isSignedIn() && (
        (isProfessional() && hasRelation(request.auth.uid, resource.data.patientId)) ||
        isAdmin()
      );
    }
    
    // Medical history collection - MEJORADA
    match /medical_history/{entryId} {
      // Professionals can create entries for patients with relationship
      allow create: if isSignedIn() && (
        (isProfessional() && hasRelation(request.auth.uid, request.resource.data.patientId)) ||
        isAdmin()
      );
      
      // Access rules for reading medical history
      allow read: if isSignedIn() && (
        (isPatient() && resource.data.patientId == request.auth.uid) ||
        (isProfessional() && hasRelation(request.auth.uid, resource.data.patientId)) ||
        isAdmin()
      );
      
      // Professionals can update entries of their patients
      allow update: if isSignedIn() && (
        (isProfessional() && hasRelation(request.auth.uid, resource.data.patientId)) ||
        isAdmin()
      );
      
      // Professionals can delete entries of their patients
      allow delete: if isSignedIn() && (
        (isProfessional() && hasRelation(request.auth.uid, resource.data.patientId)) ||
        isAdmin()
      );
    }
    
    // Default: deny all access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}